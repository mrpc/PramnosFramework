<?php

use Pramnos\Http\Request;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-26 at 17:28:07.
 * @package	pramnosFrameworkTests
 * @copyright	2014 Yannis - Pastis Glaros, Pramnos Hosting
 * @author      Yannis - Pastis Glaros <mrpc@pramnoshosting.gr>
 * @runTestsInSeparateProcesses
 */
class RequestTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Request
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if (!isset($_SERVER['HTTP_HOST'])) {
            $_SERVER['HTTP_HOST'] = 'localhost';
            $_SERVER['SERVER_PORT'] = 80;
            $_SERVER['SERVER_NAME'] = 'localhost';
            $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
            $_SERVER['HTTP_USER_AGENT'] = 'PHPUnit Tests';
            $_SERVER['REQUEST_URI'] = '/pramnosframework/';
        }
        $_GET['r'] = 'controller/display/option';
        $this->_object = new Request;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Pramnos\Http\Request
     */
    public function testGetInstance()
    {
        $_GET['r'] = 'controller/action.html/option';
        $_SERVER['REQUEST_URI'] = 'controller/action.html/option?test=test';
        $this->assertInstanceOf(
            'Pramnos\Http\Request', Request::getInstance()
        );
    }

    /**
     * @covers Pramnos\Http\Request::create
     */
    public function testCreate()
    {
        $this->assertInstanceOf(
            'Pramnos\Http\Request', Request::create("/", "GET")
        );
    }

    /**
     * @covers Pramnos\Http\Request::getOption
     */
    public function testGetOption()
    {
        unset($_GET['_option']);
        $this->assertEquals(NULL, $this->_object->getOption());
        $_GET['_option'] = 'test';
        $this->assertEquals('test', $this->_object->getOption());
    }

    /**
     * @covers Pramnos\Http\Request::staticGetOption
     */
    public function testStaticGetOption()
    {
        if (isset($_GET['_option'])) {
            unset($_GET['_option']);
        }
        $this->assertEquals(NULL, Request::staticGetOption());
        $_GET['_option'] = 'test';
        $this->assertEquals('test', Request::staticGetOption());
    }

    /**
     * @covers Pramnos\Http\Request::get
     */
    public function testGet()
    {
        $_GET['test'] = 'test';
        $_POST['test2'] = 'test2';
        $this->assertEquals('test', $this->_object->get('test', '', 'get'));
        $this->assertEquals('test2', $this->_object->get('test2', '', 'post'));
        $this->assertEquals(
            'test3', $this->_object->get('test3', 'test3', 'post')
        );
    }

    /**
     * @covers Pramnos\Http\Request::staticGet
     */
    public function testStaticGet()
    {
        $this->assertEquals(
            'test', Request::staticGet('test', 'test', 'get')
        );
        $this->assertEquals(
            'test', Request::staticGet('test', 'test', 'post')
        );
        $this->assertEquals(
            'test3', $this->_object->get('test3', 'test3', 'REQUEST')
        );
        $this->assertEquals(
            'test3', $this->_object->get('test3', 'test3', 'FILES')
        );
        $this->assertEquals(
            'test3', $this->_object->get('test3', 'test3', 'COOKIE')
        );
        $this->assertEquals(
            'test3', $this->_object->get('test3', 'test3', 'ENV')
        );
        $this->assertEquals(
            'test3', $this->_object->get('test3', 'test3', 'SESSION')
        );
        $this->assertEquals(
            'test3', $this->_object->get('test3', 'test3', 'default')
        );
        $this->assertEquals(
            'test3', $this->_object->get('test3', 'test3', 'SERVER')
        );
        $_POST['test3'] = 'test3';
        $this->assertEquals(
            'test3', $this->_object->get('test3', 'test3', 'post')
        );
        $this->assertEquals(
            0, $this->_object->get('test3', 'test3', 'post', 'int')
        );
        $this->assertInternalType(
            'integer', $this->_object->get('test3', 'test3', 'post', 'int')
        );
    }

    /**
     * @covers Pramnos\Http\Request::setModule
     * @covers Pramnos\Http\Request::getModule
     */
    public function testGetAndSetModule()
    {
        $this->_object->setModule('test');
        $this->assertEquals('test', $this->_object->getModule());
        $this->_object->setModule('');
    }

    /**
     * @covers Pramnos\Http\Request::getAction
     * @covers Pramnos\Http\Request::setAction
     */
    public function testSetAndGetAction()
    {
        $this->assertEquals('display', $this->_object->getAction());
        $this->_object->setAction('');
        $this->assertEquals('', $this->_object->getAction());
    }



    /**
     * @covers Pramnos\Http\Request::getURL
     */
    public function testGetURL()
    {
        $this->assertInternalType('string', $this->_object->getURL());
        $this->assertInternalType('string', $this->_object->getURL(false));
        $_SERVER["HTTPS"] = 'on';
        $this->assertInternalType('string', $this->_object->getURL(false));
        $_SERVER["SERVER_PORT"] = '123123';
        $this->assertInternalType('string', $this->_object->getURL(false));
    }

}
