<?php

namespace Pramnos\Tests;
use Pramnos\Routing\Router;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-19 at 15:27:13.
 * @package	pramnosFrameworkTests
 * @copyright	2015 Yannis - Pastis Glaros, Pramnos Hosting
 * @author      Yannis - Pastis Glaros <mrpc@pramnoshosting.gr>
 */
class RouterTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Router
     */
    protected $Router;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $container = new \Pramnos\Application\Application('myApp');
        $this->Router = new Router($container);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->Router = null;
    }

    /**
     * @covers Pramnos\Routing\Router
     */
    public function testAddSingleGetRoute()
    {
        $router = $this->Router;
        $router->get('foo/bar', function() { return 'hello'; });
        $this->assertEquals(
            'hello',
            $router->dispatch(\Pramnos\Http\Request::create('foo/bar', 'GET'))
        );
    }

    /**
     * @covers Pramnos\Routing\Router
     */
    public function testAddNotCallableRoute()
    {
        $router = $this->Router;
        $router->get('foo/bar', 'test');
        $this->assertNull(
            $router->dispatch(\Pramnos\Http\Request::create('foo/bar', 'GET'))
        );
    }

    /**
     * @covers Pramnos\Routing\Router
     */
    public function testAddSinglePostRoute()
    {
        $router = $this->Router;
        $router->post('foo/bar', function() { return 'hello'; });
        $this->assertEquals(
            'hello',
            $router->dispatch(\Pramnos\Http\Request::create('foo/bar', 'POST'))
        );
    }

    /**
     * @covers Pramnos\Routing\Router
     */
    public function testAddSingleOptionsRoute()
    {
        $router = $this->Router;
        $router->options('foo/bar', function() { return 'hello'; });
        $this->assertEquals(
            'hello',
            $router->dispatch(
                \Pramnos\Http\Request::create(
                    'foo/bar', 'OPTIONS'
                )
            )
        );
    }

    /**
     * @covers Pramnos\Routing\Router
     */
    public function testAddSingleDeleteRoute()
    {
        $router = $this->Router;
        $router->delete('foo/bar', function() { return 'hello'; });
        $this->assertEquals(
            'hello',
            $router->dispatch(
                \Pramnos\Http\Request::create('foo/bar', 'DELETE')
            )
        );
    }

    /**
     * @covers Pramnos\Routing\Router
     */
    public function testAddSinglePutRoute()
    {
        $router = $this->Router;
        $router->put('foo/bar', function() { return 'hello'; });
        $this->assertEquals(
            'hello',
            $router->dispatch(\Pramnos\Http\Request::create('foo/bar', 'PUT'))
        );
    }

    /**
     * @covers Pramnos\Routing\Router
     */
    public function testAddSinglePatchRoute()
    {
        $router = $this->Router;
        $router->patch('foo/bar', function() { return 'hello'; });
        $this->assertEquals(
            'hello',
            $router->dispatch(
                \Pramnos\Http\Request::create('foo/bar', 'PATCH')
            )
        );
    }

    /**
     * @covers Pramnos\Routing\Router
     */
    public function testAddMatchRoute()
    {
        $router = $this->Router;
        $router->match('GET,POST', 'foo/bar', function() { return 'hello'; });
        $this->assertEquals(
            'hello',
            $router->dispatch(
                \Pramnos\Http\Request::create('foo/bar', 'GET')
            )
        );
        $this->assertEquals(
            'hello',
            $router->dispatch(
                \Pramnos\Http\Request::create('foo/bar', 'POST')
            )
        );
    }

    /**
     * @covers Pramnos\Routing\Router
     * @covers Pramnos\Routing\Route
     */
    public function testInvalidRoute()
    {
        $router = $this->Router;
        $router->get('foo/bar', function() { return 'hello'; });
        $this->assertNull(
            $router->dispatch(
                \Pramnos\Http\Request::create('not/found', 'GET')
            )
        );
    }

    /**
     * @covers Pramnos\Routing\Router
     */
    public function testInvalidRouteByParam()
    {
        $router = $this->Router;
        $router->get('foo/bar', function() { return 'hello'; });
        $this->assertNull(
            $router->dispatch(
                \Pramnos\Http\Request::create('foo/bar', 'POST')
            )
        );
    }

    /**
     * @covers Pramnos\Routing\Router
     * @expectedException \Exception
     */
    public function testInvalidMethod()
    {
        $router = $this->Router;
        $this->setExpectedException("\Exception", "Invalid Method: INVALID");
        $router->addRoute('foo/bar', 'INVALID', function() { return 'a'; });
    }

    /**
     * @covers Pramnos\Routing\Router
     */
    public function testMultipleMethods()
    {
        $router = $this->Router;
        $router->get('foo/bar', function () { return 'hello'; });
        $router->post('foo/bar', function () { return 'post hello'; });
        $this->assertEquals(
            'hello',
            $router->dispatch(
                \Pramnos\Http\Request::create('foo/bar', 'GET')
            )
        );
        $this->assertEquals(
            'post hello',
            $router->dispatch(
                \Pramnos\Http\Request::create('foo/bar', 'POST')
            )
        );
    }

    /**
     * @covers Pramnos\Routing\Router
     */
    public function testParameters()
    {
        $router = $this->Router;
        $router->get(
            'foo/{name}/boom/{age?}/{location?}',
            function ($name, $age = 25, $location = 'GR') {
                return $name.$age.$location;
            }
        );
        $this->assertEquals(
            'Yannis30GR',
            $router->dispatch(
                \Pramnos\Http\Request::create('foo/Yannis/boom/30', 'GET')
            )
        );
    }


}
