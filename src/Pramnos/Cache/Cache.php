<?php

namespace Pramnos\Cache;

/**
 * Simple cache methods to be used in all applications created by PramnosFramework
 * @static
 * @author      Yannis - Pastis Glaros <mrpc@pramnoshosting.gr>
 * @subpackage  Cache
 * @copyright   (C) 2024 Yannis - Pastis Glaros
 */
class Cache extends \Pramnos\Framework\Base
{

    /**
     * Prefix for all cache files. By default this will be the memcached cache
     * @var string
     */
    public $prefix='';
    /**
     * A second prefix for cache files. Used to control many cache files at once
     * @var strimg
     */
    public $category='';
    /**
     * Type of cache. This will be used as the cache file extension
     * @var string
     */
    public $type='cache';
    /**
     * cache lifetime (in seconds), if set to 0, the cache is valid forever.
     * @var integer
     */
    public $timeout=3600;
    /**
     * Cache Save Time
     * @var int
     */
    public $time = 0;
    /**
     * Cache file contents
     * @var string
     */
    public $data='';
    /**
     * Where the cache file will be saved
     * @var string
     */
    public $cacheDir='';
    /**
     * enable / disable caching
     * @var boolean
     */
    public $caching=true;
    /**
     * Extra data to be saved inside the cache file
     * @var mixed
     */
    public $extradata=NULL;
    /**
     * The actual path of the file, generated by this class
     * @var string
     */
    public $actualPath='';
    /**
     * The id, if is generated
     * @var string
     */


    /**
     * Memcache Server
     * @var string
     */
    public $memcacheServer='localhost';
    /**
     * Memcache Port
     * @var int
     */
    public $memcachePort=11211;

    /**
     * Redis Server
     * @var string
     */
    public $redisServer='localhost';
    
    /**
     * Redis Port
     * @var int
     */
    public $redisPort=6379;
    
    /**
     * Redis Database Index
     * @var int
     */
    public $redisDatabase=0;
    
    /**
     * Redis Password
     * @var string|null
     */
    public $redisPassword=null;

    protected static $_redis=null;
    protected static $_redisConnected=false;

    protected $_id='';
    protected $_cachename='';

    /**
     * A key that saves all memecached tags
     * @var string
     */
    protected $tagsKey = 'memcachedtags';


    /**
     * Cache method: file, memcache, memcached, redis
     * If something is wrong, it defaults to file
     * @var string
     */
    public $method='memcached';


    protected static $_memcache=null;
    protected static $_memcacheConnected=false;
    protected static $_memcached=null;
    protected static $_memcachedConnected=false;

    /**
     * The adapter instance
     * @var AdapterInterface
     */
    protected $adapter = null;

    /**
     * Class constructor. Check the paths of cache and create if needed.
     * @param string $category
     * @param string $type
     * @param string $method file, memcache, memcached, redis
     */
    public function __construct($category=NULL, $type=NULL, $method='memcached')
    {
        $this->method = $method;
        if ($category!== NULL) {
            $this->category=$category;
        }
        if ($type!==NULL) {
            $this->type=$type;
        }
        if ($this->cacheDir == '' && defined('CACHE_PATH')) {
            $this->cacheDir = CACHE_PATH;
        }
        if ($this->prefix == '') {
            $prefix = \Pramnos\Application\Settings::getSetting('database')->prefix;
            if ($prefix != '') {
                $this->prefix = $prefix;
            }
        }
        
        // Create the appropriate adapter
        $this->initializeAdapter($method);
        
        parent::__construct();
    }

    /**
     * Initialize the cache adapter based on the selected method
     * @param string $method cache method
     */
    protected function initializeAdapter($method) 
    {
        switch ($method) {
            case 'redis':
                if (class_exists('\Redis')) {
                    $this->adapter = new Adapter\RedisAdapter(
                        $this->redisServer,
                        $this->redisPort,
                        $this->redisDatabase,
                        $this->redisPassword,
                        $this->prefix
                    );
                    
                    if (!$this->adapter->connect()) {
                        $this->initializeAdapter('memcached');
                    }
                } else {
                    $this->initializeAdapter('memcached');
                }
                break;
                
            case 'memcached':
                if (class_exists('\Memcached')) {
                    $this->adapter = new Adapter\MemcachedAdapter(
                        $this->memcacheServer,
                        $this->memcachePort,
                        \Pramnos\Application\Settings::getSetting('database')->database,
                        $this->prefix
                    );
                    
                    if (!$this->adapter->connect()) {
                        $this->initializeAdapter('memcache');
                    }
                } else {
                    $this->initializeAdapter('memcache');
                }
                break;
                
            case 'memcache':
                if (class_exists('\Memcache')) {
                    $this->adapter = new Adapter\MemcacheAdapter(
                        $this->memcacheServer,
                        $this->memcachePort,
                        $this->prefix
                    );
                    
                    if (!$this->adapter->connect()) {
                        $this->initializeAdapter('file');
                    }
                } else {
                    $this->initializeAdapter('file');
                }
                break;
                
            case 'file':
            default:
                $this->adapter = new Adapter\FileAdapter(
                    $this->cacheDir,
                    $this->prefix
                );
                
                if (!$this->adapter->connect()) {
                    $this->caching = false;
                }
                break;
        }
    }

    /**
     * Get the current adapter
     * @return AdapterInterface
     */
    public function getAdapter()
    {
        return $this->adapter;
    }

    /**
     * Returns a unique hash name for the category
     * @param string $category
     * @return string
     */
    public function getCategory($category)
    {
        if ($category == '') {
            return '';
        }
        if ($this->method == 'file') {
            return $category;
        }
        if ($this->method == 'redis') {
            if (self::$_redisConnected != true) {
                $this->_redisConnect();
            }
            if (self::$_redisConnected != true) {
                return $category;
            }
            if (self::$_redis === null) {
                return $category;
            }
            try {
                $entry = self::$_redis->get($this->prefix . $this->tagsKey);
                if ($entry) {
                    $entry = json_decode($entry, true);
                }
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return $category;
            }
            if (!is_array($entry)) {
                $entry = array();
            }
            if (isset($entry[$category])) {
                return $entry[$category];
            }
            $entry[$category] = uniqid(substr(md5($category), 0, 3));

            try {
                self::$_redis->set(
                    $this->prefix . $this->tagsKey, 
                    json_encode($entry)
                );
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return $category;
            }

            return $entry[$category];
        }
        if ($this->method == 'memcached') {
            if (self::$_memcachedConnected != true) {
                $this->_memcachedConnect();
            }
            if (self::$_memcachedConnected != true) {
                return $category;
            }
            if (self::$_memcached === null) {
                return $category;
            }
            try {
                $entry = self::$_memcached->get(
                    $this->prefix . $this->tagsKey
                );
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return $category;
            }
            if (!is_array($entry)) {
                $entry = array();
            }
            if (isset($entry[$category])) {

                return $entry[$category];
            }
            $entry[$category] = uniqid(substr(md5($category), 0, 3));

            try {
                self::$_memcached->set(
                    $this->prefix . $this->tagsKey, $entry
                );
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return $category;
            }

            return $entry[$category];

        } elseif ($this->method == 'memcache') {


            if (self::$_memcacheConnected != true) {
                $this->_memcacheConnect();
            }
            if (self::$_memcacheConnected != true) {
                return $category;
            }
            if (self::$_memcache === null) {
                return $category;
            }
            try {
                $entry = self::$_memcache->get($this->prefix . $this->tagsKey);
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return $category;
            }
            if (!is_array($entry)) {
                $entry = array();
            }
            if (isset($entry[$category])) {
                return $entry[$category];
            }

            $entry[$category] = uniqid(substr(md5($category), 0, 3));

            try {
                self::$_memcache->set(
                    $this->prefix . $this->tagsKey, $entry, false
                );
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return $category;
            }

            return $entry[$category];


        }
        return $category;
    }


    /**
     * Resets a category name for later use in getCategory
     * @param string $category
     */
    public function resetCategory($category)
    {
        if ($category == '') {
            return null;
        }

        if ($this->method == 'redis') {
            if (self::$_redisConnected != true) {
                $this->_redisConnect();
            }
            if (self::$_redisConnected != true) {
                return null;
            }
            if (self::$_redis === null) {
                return null;
            }
            try {
                $entry = self::$_redis->get($this->prefix . $this->tagsKey);
                if ($entry) {
                    $entry = json_decode($entry, true);
                }
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return null;
            }
            if (!is_array($entry)) {
                $entry = array();
            }
            $entry[$category] = uniqid(substr(md5($category), 0, 3));

            try {
                self::$_redis->set(
                    $this->prefix . $this->tagsKey, 
                    json_encode($entry)
                );
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            }
        } elseif ($this->method == 'memcached') {
            if (self::$_memcachedConnected != true) {
                $this->_memcachedConnect();
            }
            if (self::$_memcachedConnected != true) {
                return null;
            }
            if (self::$_memcached === null) {
                return null;
            }
            try {
                $entry = self::$_memcached->get(
                    $this->prefix . $this->tagsKey
                );
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return null;
            }
            if (!is_array($entry)) {
                $entry = array();
            }
            $entry[$category] = uniqid(substr(md5($category), 0, 3));



            try {
                self::$_memcached->set(
                    $this->prefix . $this->tagsKey, $entry
                );
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            }

        } elseif ($this->method == 'memcache') {
            if (self::$_memcacheConnected != true) {
                $this->_memcacheConnect();
            }
            if (self::$_memcacheConnected != true) {
                return null;
            }
            if (self::$_memcache === null) {
                return null;
            }
            try {
                $entry = self::$_memcache->get($this->prefix . $this->tagsKey);
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return null;
            }
            if (!is_array($entry)) {
                $entry = array();
            }

            $entry[$category] = uniqid(substr(md5($category), 0, 3));

            try {
                self::$_memcache->set(
                    $this->prefix . $this->tagsKey, $entry, false
                );
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            }
        }
    }

    /**
     * Returns the memcached object
     * @return \Memcached
     */
    public function getMemCached()
    {
        return self::$_memcached;
    }

    /**
     * Connect to memcache server
     * @return boolean
     */
    protected function _memcacheConnect()
    {
        if (self::$_memcache == null) {
            self::$_memcache = new \Memcache;
            try {
                self::$_memcacheConnected =self::$_memcache->connect(
                    $this->memcacheServer, $this->memcachePort
                );
            }
            catch (\Exception $exc) {
                \pramnos\Logs\Logger::logError($exc->getMessage(), $exc);
                $method = 'file';
                $this->method='file';
            }
        }
        if (self::$_memcacheConnected != true) {
            $method = 'file';
            $this->method='file';
            return false;
        }
        return true;
    }

    /**
     * Connect to memcache server through memcached pecl extension.
     * It uses database name for persistent id.
     * @return boolean
     */
    protected function _memcachedConnect()
    {
        //Check if memcached is supported
        if (!class_exists('Memcached')) {
            return false;
        }


        if (self::$_memcached == null) {
            self::$_memcached = new \Memcached(
                \Pramnos\Application\Settings::getSetting('database')->database
            );
            $servers = self::$_memcached->getServerList();
            if (is_array($servers) && count($servers) > 0) {
                self::$_memcachedConnected = true;
                return true;
            }
            try {
                self::$_memcachedConnected =self::$_memcached->addServer(
                    $this->memcacheServer, $this->memcachePort
                );
            }
            catch (\Exception $exc) {
                \pramnos\Logs\Logger::logError($exc->getMessage(), $exc);
                $method = 'memcache';
                $this->method='memcache';
            }
        }
        if (self::$_memcachedConnected != true) {
            $method = 'memcache';
            $this->method='memcache';
            return false;
        }
        return true;
    }

    /**
     * Connect to Redis server
     * @return boolean
     */
    protected function _redisConnect()
    {
        if (!class_exists('Redis')) {
            return false;
        }
        
        if (self::$_redis === null) {
            self::$_redis = new \Redis();
            try {
                self::$_redisConnected = self::$_redis->connect(
                    $this->redisServer, 
                    $this->redisPort
                );
                
                if ($this->redisPassword) {
                    if (!self::$_redis->auth($this->redisPassword)) {
                        self::$_redisConnected = false;
                    }
                }
                
                if (self::$_redisConnected && $this->redisDatabase > 0) {
                    self::$_redis->select($this->redisDatabase);
                }
            }
            catch (\Exception $exc) {
                \pramnos\Logs\Logger::logError($exc->getMessage(), $exc);
                $this->method = 'memcached';
                self::$_redisConnected = false;
            }
        }
        
        return self::$_redisConnected;
    }

    /**
     * Create cache dir if it doesn't exist
     */
    private function _createCacheDir()
    {
        try {
            mkdir($this->cacheDir);
        }
        catch (\Exception $ex) {
            $this->caching=false;
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
        }
    }





    /**
     * Factory Method
     * @param string $category
     * @param string $type
     * @param string $method file, memcache, memcached, redis
     * @return \pramnos_cache
     */
    public static function getInstance($category=NULL, $type=NULL,
        $method='memcached')
    {
        return new Cache($category, $type, $method);
    }


    /**
     * Load data from filesystem
     * @return boolean
     */
    protected function _loadFromFile()
    {
        $this->actualPath=$this->_generatePath();
        if ($this->_cacheExists()){
            if ($this->_loadCache()) {
                if ($this->_isExpired()){
                    return false;
                }
                return $this->data;
            }
            else {
                return false;
            }
        } else {
            return false;
        }
    }

    /**
     * Load data from memcache
     * @return boolean
     */
    protected function _loadFromMemcache()
    {

        if (self::$_memcacheConnected != true) {
            return false;
        }
        if (self::$_memcache === null) {
            return false;
        }
        try {
            $entry = self::$_memcache->get($this->_cachename);
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        if (\Pramnos\General\Helpers::checkUnserialize($entry)) {
            return false;
        }
        if (!is_object($entry)) {
            return false;
        }
        $this->data=$entry->data;
        $this->timeout=$entry->timeout;
        return $this->data;
    }

    /**
     * Load data from memcached
     * @return boolean
     */
    protected function _loadFromMemcached()
    {

        if (self::$_memcachedConnected != true) {
            return false;
        }
        if (self::$_memcached === null) {
            return false;
        }
        try {
            $entry = self::$_memcached->get($this->_cachename);
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        if (\Pramnos\General\Helpers::checkUnserialize($entry)) {
            return false;
        }
        if (!is_object($entry)) {
            return false;
        }
        // Check for timeout
        if (isset($entry->time) && $entry->time > 0) {
            if (($entry->time + $this->timeout) < time()) {
                $this->data = $entry->data;
                self::$_memcached->delete($this->_cachename);
                return false;
            }
        }
        $this->data=$entry->data;
        $this->timeout=$entry->timeout;
        return $this->data;
    }

    /**
     * Load data from Redis
     * @return boolean|string
     */
    protected function _loadFromRedis()
    {
        if (self::$_redisConnected != true) {
            return false;
        }
        if (self::$_redis === null) {
            return false;
        }
        try {
            $entry = self::$_redis->get($this->_cachename);
            if (!$entry) {
                return false;
            }
            $entry = unserialize($entry);
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        if (!is_object($entry)) {
            return false;
        }
        // Check for timeout
        if (isset($entry->time) && $entry->time > 0 && $this->timeout > 0) {
            if (($entry->time + $this->timeout) < time()) {
                $this->data = $entry->data;
                self::$_redis->del($this->_cachename);
                return false;
            }
        }
        $this->data = $entry->data;
        $this->timeout = $entry->timeout;
        return $this->data;
    }

    /**
     * Load and return data from cache
     * @param string $id Cache name
     * @param string $category Cache category to override object property
     * @param integer $timeout Timeout in seconds. Overrides object property
     * @return boolean|string Returns data or False if cache doesn't exist
     */
    public function load($id, $category=NULL, $timeout=NULL)
    {
        if ($this->caching==false){
            return false;
        }
        if ($timeout !== NULL){
            $this->timeout=$timeout;
        }
        if ($category !== NULL){
            $this->category=$category;
        }
        $this->_id=$id;
        $this->_cachename = $this->_generateCacheName($id);
        if ($this->method == 'redis') {
            return $this->_loadFromRedis();
        } elseif ($this->method == 'memcache') {
            return $this->_loadFromMemcache();
        } elseif ($this->method == 'memcached') {
            return $this->_loadFromMemcached();
        }
        return $this->_loadFromFile();
    }

    /**
     * Remove a cache object
     * @param string $id
     * @param bool $forceFileRemove
     * @return boolean
     */
    public function remove($id, $forceFileRemove = false)
    {
        if ($this->caching==false){
            return false;
        }

        if ($this->method == 'redis') {
            $this->_redisRemove($id);
        } elseif ($this->method=='memcache') {
            $this->_memcacheRemove($id);
        } elseif ($this->method=='memcached') {
            $this->_memcachedRemove($id);
        } else {
            return $this->_fileRemove($id);
        }
        if ($forceFileRemove == true) {
            return $this->_fileRemove($id);
        } else {
            return true;
        }
    }

    /**
     * Remove a cache object from memcache
     * @param string $id
     * @return boolean
     */
    protected function _memcacheRemove($id)
    {
        $this->_id=$id;
        $this->_cachename = $this->_generateCacheName($id);
        if (self::$_memcacheConnected != true) {
            return false;
        }
        if (self::$_memcache === null) {
            return false;
        }
        try {
            self::$_memcache->delete($this->_cachename);
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        return true;
    }

    /**
     * Remove a cache object from memcached
     * @param string $id
     * @return boolean
     */
    protected function _memcachedRemove($id)
    {
        $this->_id=$id;
        $this->_cachename = $this->_generateCacheName($id);
        if (self::$_memcachedConnected != true) {
            return false;
        }
        if (self::$_memcached === null) {
            return false;
        }
        try {
            self::$_memcached->delete($this->_cachename);
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        return true;
    }

    /**
     * Remove a cache object from Redis
     * @param string $id
     * @return boolean
     */
    protected function _redisRemove($id)
    {
        $this->_id = $id;
        $this->_cachename = $this->_generateCacheName($id);
        if (self::$_redisConnected != true) {
            return false;
        }
        if (self::$_redis === null) {
            return false;
        }
        try {
            self::$_redis->del($this->_cachename);
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        return true;
    }

    /**
     * Remove a cache object from the filesystem
     * @param string $id
     * @return boolean
     */
    protected function _fileRemove($id)
    {
        $this->_id=$id;
        $this->_cachename = $this->_generateCacheName($id);
        $this->actualPath=$this->_generatePath();
        $this->data='';
        if (file_exists($this->actualPath . DS . $this->_cachename)){
            try {
                $fileSystem = new \Pramnos\Filesystem\Filesystem();
                $fileSystem->removeFile(
                    $this->actualPath . DS . $this->_cachename
                );
                $this->_clearEmpty();
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);;
                return false;
            }
        }
        return true;
    }

    /**
     * Check if current cache directory is empty
     * @return boolean
     */
    protected function _clearEmpty()
    {
        if (file_exists($this->actualPath) && is_dir($this->actualPath)){
            $contents = scandir($this->actualPath);
            if (count($contents) != 2){
                return true;
            }
            try {
                @rmdir($this->actualPath);
                $this->_clearEmptyPrefix();
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return false;
            }
        }
        return true;
    }


    /**
     * Check if current prefix dir if it's empty
     */
    protected function _clearEmptyPrefix()
    {
        if ($this->prefix == ''){
            return true;
        }
        $path = $this->cacheDir . DS . $this->_sanitizeName($this->prefix);
        if (file_exists($path) && is_dir($path)){
            $contents = scandir($path);
            if (count($contents) != 2){
                return true;
            }
            try {
                @rmdir($path);
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return false;
            }
        }
        return true;
    }

    /**
     * Clear a cache category or the whole cache under prefix
     * @param string $category
     * @todo Implement method to clear by type
     */
    public function clear($category='')
    {

        if ($this->method == 'redis') {
            $this->_fileClear($category);
            return $this->_redisClear($category);
        } elseif ($this->method == 'memcache') {
            $this->_fileClear($category);
            return $this->_memcacheClear();
        } elseif ($this->method == 'memcached') {
            $this->_fileClear($category);
            return $this->_memcachedClear($category);
        }
        return $this->_fileClear($category);
    }

    /**
     * Clear memcache
     * @return boolean
     */
    protected function _memcacheClear()
    {
        if (self::$_memcacheConnected != true) {
            return false;
        }
        if (self::$_memcache === null) {
            return false;
        }
        try {
            self::$_memcache->flush();
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        return true;
    }

    /**
     * Clear memcache
     * @return boolean
     */
    protected function _memcachedClear($category='')
    {
        if (self::$_memcachedConnected != true) {
            return false;
        }
        if (self::$_memcached === null) {
            return false;
        }
        if ($category == '') {
            try {
                self::$_memcached->flush();
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return false;
            }
            return true;
        } else {
            $this->resetCategory($category);
        }

        return true;
    }

    /**
     * Clear Redis cache
     * @param string $category
     * @return boolean
     */
    protected function _redisClear($category='')
    {
        if (self::$_redisConnected != true) {
            return false;
        }
        if (self::$_redis === null) {
            return false;
        }
        if ($category == '') {
            try {
                self::$_redis->flushDb();
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return false;
            }
            return true;
        } else {
            $this->resetCategory($category);
        }

        return true;
    }

    /**
     * Clear file based cache
     * @param string $category
     * @return bool
     */
    protected function _fileClear($category='')
    {
        $return = true;
        if ($this->prefix != ''){
            $this->prefix = str_replace("_", "", $this->prefix);
            $cache_path = $this->cacheDir
                . DS . $this->_sanitizeName($this->prefix);
        } else {
            $cache_path = $this->cacheDir;
        }
        $fileSystem = new \Pramnos\Filesystem\Filesystem();
        if ($category != ''){
            $cache_path .= DS . $this->_sanitizeName($category);
            $return = $fileSystem->destroyDirectory($cache_path);
        }
        if (file_exists($cache_path) && is_dir($cache_path)){
            $return = $fileSystem->clearDirectory($cache_path);
            if ($return == true && $this->prefix != ''){
                @rmdir($cache_path);
            }
        }
        return $return;
    }


    /**
     * Clear a cache directory from expired cache files
     * @return \pramnos_cache
     */
    public function cleanup()
    {
        $fileSystem = new \Pramnos\Filesystem\Filesystem();
        $files = $fileSystem->listDirectoryFiles($this->cacheDir);
        foreach ($files as $file){

            if ($this->_checkIfFileIsExpired($file)){
                $fileSystem->removeFile($file);
            }
        }
        $this->_clearEmpty();
        return $this;
    }



    /**
     * Check if a file is expired based on it's contents
     * @param string $file
     * @return boolean
     */
    private function _checkIfFileIsExpired($file)
    {
        if (!is_file($file)){
            return false;
        }

        $contents = file_get_contents($file);
        if (!\Pramnos\General\Helpers::checkUnserialize($contents)) {
            return false;
        }
        try {
            $details = unserialize($contents);
        }
        catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        unset($contents);

         if (@filemtime($file) < (time() - $details->timeout)) {
             return true;
         }
         return false;
    }


    /**
     * Save data to the cache for file method
     * @param string $id
     * @return boolean
     */
    protected function _fileSave($id=NULL)
    {
        if ($id === NULL){
            $id = $this->_id;
        } else {
            $this->id = $id;
            $this->_cachename = $this->_generateCacheName($id);
        }
        if ($this->actualPath == ''){
            $this->actualPath=$this->_generatePath();
        }
        if ($this->_cachename == ''){
            $this->_cachename = $this->_generateCacheName($id);
        }
        if ($id == '') {
            return FALSE;
        }
        $dataFile = serialize($this);
        try {
            $fp = @fopen($this->actualPath . DS . $this->_cachename, 'w');
            if ($fp){
                fputs($fp, $dataFile);
                fclose($fp);
                unset($dataFile);
                unset($fp);
            }
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return FALSE;
        }
        return true;
    }


    /**
     * Save data to the cache for file method
     * @param string $id
     * @return boolean
     */
    protected function _memcacheSave($id=NULL)
    {
        if (self::$_memcacheConnected != true) {
            return false;
        }
        if (self::$_memcache === null) {
            return false;
        }


        if ($id === NULL){
            $id = $this->_id;
        } else {
            $this->id = $id;
            $this->_cachename = $this->_generateCacheName($id);
        }
        if ($this->_cachename == ''){
            $this->_cachename = $this->_generateCacheName($id);
        }
        if ($id == ''){
            return FALSE;
        }

        try {
            self::$_memcache->set(
                $this->_cachename, $this, false, $this->timeout
            );
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        return true;
    }

    /**
     * Save data to the cache for memcached method
     * @param string $id
     * @return boolean
     */
    protected function _memcachedSave($id=NULL)
    {
        if (self::$_memcachedConnected != true) {
            return false;
        }
        if (self::$_memcached === null) {
            return false;
        }


        if ($id === NULL){
            $id = $this->_id;
        } else {
            $this->id = $id;
            $this->_cachename = $this->_generateCacheName($id);
        }
        if ($this->_cachename == ''){
            $this->_cachename = $this->_generateCacheName($id);
        }
        if ($id == ''){
            return FALSE;
        }

        try {
            self::$_memcached->set(
                $this->_cachename, $this, $this->timeout
            );
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        return true;
    }

    /**
     * Save data to Redis
     * @param string $id
     * @return boolean
     */
    protected function _redisSave($id=NULL)
    {
        if (self::$_redisConnected != true) {
            return false;
        }
        if (self::$_redis === null) {
            return false;
        }

        if ($id === NULL){
            $id = $this->_id;
        } else {
            $this->id = $id;
            $this->_cachename = $this->_generateCacheName($id);
        }
        if ($this->_cachename == ''){
            $this->_cachename = $this->_generateCacheName($id);
        }
        if ($id == ''){
            return FALSE;
        }

        try {
            if ($this->timeout > 0) {
                self::$_redis->setex(
                    $this->_cachename, 
                    $this->timeout, 
                    serialize($this)
                );
            } else {
                self::$_redis->set(
                    $this->_cachename, 
                    serialize($this)
                );
            }
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        return true;
    }

    /**
     * Save data to the cache
     * @param string $data Data to be written
     * @param string $id Optional, override the object property
     * @return boolean Return true if data is written
     */
    public function save($data='', $id=NULL)
    {
        if ($data != ''){
            $this->data = $data;
        }
        if ($this->caching==false){
            return false;
        }
        $this->time = time();

        if ($this->method == 'redis') {
            return $this->_redisSave($id);
        } elseif ($this->method == 'memcached') {
            return $this->_memcachedSave($id);
        } elseif ($this->method == 'memcache') {
            return $this->_memcacheSave($id);
        }
        return $this->_fileSave($id);

    }

    /**
     * Generate the file name to be saved
     * @param string $id
     * @return string
     */
    protected function _generateCacheName($id)
    {
        $prefix = '';
        $category = '';
        if ($this->prefix != ''){
            $this->prefix = str_replace("_", "", $this->prefix);
            $prefix = $this->_sanitizeName($this->prefix . '_');
        }
        if ($this->category != ''){
            $category = $this->_sanitizeName($this->category);
        }
        if (defined('CACHE_PREFIX')) {
            $this->_id = $prefix
                . $this->getCategory($category) . '_'
                . $id
                . '.'
                . CACHE_PREFIX
                . '.'
                . $this->_sanitizeName($this->type);
        } else {
            $this->_id = $prefix
                . $this->getCategory($category) . '_'
                . $id
                . '.'
                . $this->_sanitizeName($this->type);
        }

        return $this->_id;
    }

    /**
     * Generate the path to be used
     * @return boolean|string The path that will be used, or FALSE
     */
    protected function _generatePath()
    {
        $prefix = '';
        $category = '';
        if ($this->prefix != '') {
            $this->prefix = str_replace("_", "", $this->prefix);
            $prefix = $this->_sanitizeName($this->prefix);
        }
        if ($this->category != '') {
            $category = $this->_sanitizeName($this->category);
        }
        $path = $this->cacheDir . DS . $prefix . DS
            . $this->getCategory($category);
        if (file_exists($path) && is_dir($path)) {
            $this->actualPath=$path;
            return $this->actualPath;
        } elseif ($this->method == 'file') {
            try {
                $this->_mkdir($prefix, $category);
                $this->actualPath=$path;
                return $this->actualPath;
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                $this->caching=false;
            }
        }
        return false;
    }

    /**
     * Creates all required directories if they dont exist
     * @param string $prefix
     * @param string $category
     * @return boolean
     */
    protected function _mkdir($prefix, $category)
    {
        if ($prefix != '' && !file_exists($this->cacheDir . DS . $prefix)) {
            try {
                @mkdir($this->cacheDir . DS . $prefix);
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return false;
            }
        }
        if ($prefix != '' && $category != ''){
            $category = $prefix . DS . $category;
        }
        if ($category != ''
            && !file_exists($this->cacheDir . DS . $category)) {
            try {
                @mkdir($this->cacheDir . DS . $category);
            } catch (\Exception $ex) {
                \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
                return false;
            }
        }
    }

    /**
     * Cleans up a string to be used in cache filename
     * @param string $name
     * @return string
     */
    protected function _sanitizeName($name)
    {
        return preg_replace(
            array('/\s/', '/\.[\.]+/', '/[^\w_\.\-]/'),
            array('_', '.', ''), $name
        );
    }


    /**
     * Check if a cache file is still valid by reading when it's created
     * from the filesystem
     * @return boolean
     */
    protected function _isExpired()
    {
        $path=$this->actualPath . DS . $this->_cachename;
        try {
            if (@filemtime($path) > (time() - $this->timeout)) {
                return false;
            }
            else {
                $fileSystem = new \Pramnos\Filesystem\Filesystem();
                $fileSystem->removeFile(
                    $this->actualPath . DS . $this->_cachename
                );
                return true;
            }
        }
        catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
    }

    /**
     * Check if a cache file exists
     * @return boolean
     */
    protected function _cacheExists()
    {
        if (file_exists($this->actualPath . DS . $this->_cachename)) {
            return true;
        }
        else {
            return false;
        }
    }


    /**
     * Load the cache file and overload the data to cache object
     * @return boolean
     */
    protected function _loadCache()
    {
        try {
            $filedata = file_get_contents(
                $this->actualPath . DS . $this->_cachename
            );
        } catch (\Exception $ex) {
            $this->caching=false;
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
            return false;
        }
        if (\Pramnos\General\Helpers::checkUnserialize($filedata)) {
            $actualData = unserialize($filedata);
            $this->data=$actualData->data;
            $this->timeout=$actualData->timeout;
            unset($filedata);
            return true;
        }
        try {
            unlink($this->actualPath . DS . $this->_cachename);
        } catch (\Exception $ex) {
            \pramnos\Logs\Logger::logError($ex->getMessage(), $ex);
        }
        $this->caching=false;

        return false;
    }

    /**
     * Returns the Redis object
     * @return \Redis
     */
    public function getRedis()
    {
        return self::$_redis;
    }
    
    /**
     * Tests the current cache connection by writing and reading data
     * @param string $testKey Key to use for testing
     * @return boolean True on success, false on failure
     */
    public function testConnection($testKey = 'pramnos_test_connection')
    {
        if (!$this->caching || $this->adapter === null) {
            return false;
        }
        
        return $this->adapter->test();
    }
    
    /**
     * Returns statistics about the cache
     * @return array Array containing statistics about the cache
     */
    public function getStats()
    {
        if (!$this->caching || $this->adapter === null) {
            return [
                'method' => $this->method,
                'categories' => 0,
                'items' => 0
            ];
        }
        
        return $this->adapter->getStats();
    }
}